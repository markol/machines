/*
 * P V E C T O R . H P P
 * (c) Charybdis Limited, 1998. All Rights Reserved.
 */

template < class T >
bool operator ==( const ctl_pvector< T >& x, const ctl_pvector< T >& y )
{
	bool result = true;

	if( x.size() == y.size() )
	{
		for( size_t i = 0; i < x.size() and result; ++i )
		{
			if( ( x[ i ] == NULL ) or ( y[ i ] == NULL ) )
			{
				if( x[ i ] != NULL or y[ i ] != NULL )
					result = false;
			}
			else if( *(x[ i ]) != *(y[ i ]) )
				result = false;
		}
	}
	else
		result = false;

	return result;
}

template< class T >
void perWrite( PerOstream& ostr, const ctl_pvector< T >& vec )
{
// bob    PER_WRITE_RAW_OBJECT( ostr, vec.size() );
// bob
// bob	//TBD: no const -iterators so use a size_t for loop.
// bob	for( size_t i = 0; i < vec.size(); ++i )
// bob	{
// bob		ostr << vec[ i ];
// bob	}    
}
 

template< class T >
void perRead( PerIstream& istr, ctl_pvector< T >& vec )
{
// bob    vec.erase( vec.begin(), vec.end() );
// bob    ASSERT( vec.size() == 0, "Vector has not been properly cleared" );
// bob
// bob    size_t  size;
// bob    PER_READ_RAW_OBJECT( istr, size );
// bob    
// bob    vec.reserve( size );
// bob    
// bob    for( size_t i = 0; i < size; ++i )
// bob    {
// bob        T*   pT;
// bob        istr >> pT;
// bob        vec.push_back( pT );
// bob    }
}
